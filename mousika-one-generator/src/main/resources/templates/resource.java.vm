package ${package.Controller};

import com.sinfusi.democracy.common.resource.BaseResource;
import com.baomidou.mybatisplus.core.conditions.Condition;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.codahale.metrics.annotation.Timed;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.PathVariable;
import com.sinfusi.democracy.web.rest.util.HeaderUtil;
import com.sinfusi.democracy.web.rest.errors.BadRequestAlertException;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;
/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/api")

#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
    private final static Logger logger = LoggerFactory.getLogger(${table.controllerName}.class);
    public ${table.serviceName} ${table.entityPath}Service;

    public ${table.controllerName}(${table.serviceName} ${table.entityPath}Service){
        this.${table.entityPath}Service=${table.entityPath}Service;
    }

    /**
     * @description : 获取分页列表
     * @author : ${author}
     * @since : Create in ${date}
     * @Return : 如果未找到数据返回Body为Page对象，状态码为200（success）
     * 请注意入参对象为Mybatis plus（com.baomidou.mybatisplus.plugins.Page）提供的分页对象，而非Spring自身的分页对象。
     * 分页请求URL例如：http://localhost:8081/api/param-dicts?current=1&size=2&descs=字段名1,字段名2&ascs=字段名3,字段名4
     *      current：当前页（从1开始）
     *      size：每页显示返回条数
     *      descs：倒序排序的列
     *      ascs：正序排序的列
     */
    @Timed
    @GetMapping("/${resource}s")
    public ResponseEntity<Page<${entity}>> get${entity}List(${entity} ${table.entityPath} , Page<${entity}> page)  {
        logger.info("获取分页列表{}",${table.entityPath}+","+page);
        page=(Page<${entity}>)${table.entityPath}Service.page(page,new QueryWrapper<${entity}>(${table.entityPath}));
        return ResponseEntity.ok().body(page);
    }

    /**
     * @description : 通过id获取User,其它服务使用此资源获取用户信息
     * URL PATH?arr[]=1&arr[]=2&arr[]=3
     * feignClient 调用时(@RequestParam(ids) String[] ids)
     * @author : ${author}
     * @param ids
     * @return : 如果查询到数据返回数据对象，如果未找到对应数据 Body值为空。
     */
    @Timed
    @GetMapping("/${resource}s/ids")
    public ResponseEntity<List<${entity}>> get${entity}ListByIds(@RequestParam("ids") String[] ids) {
        logger.info("根据id数组查询${entity}数据{}",java.util.Arrays.toString(ids));
        if(null==ids){
        throw new BadRequestAlertException("参数为空",null,null);
        }
        QueryWrapper wrapper = new QueryWrapper();
        wrapper.in("id",ids);
        List<${entity}> ${table.entityPath}List = ${table.entityPath}Service.list(wrapper);
        return ResponseEntity.ok().body(${table.entityPath}List);
    }

    /**
     * @description : 通过id获取${entity}
     * @author : ${author}
     * @since : Create in ${date}
     * @return : 如果查询到数据返回数据对象，如果未找到对应数据 则Body值为空。
     */
    @Timed
    @GetMapping("/${resource}s/{id}")
    public ResponseEntity<${entity}> get${entity}ById(@PathVariable String id) {
        logger.info("根据id查询${entity}数据{}",id);
        return ResponseEntity.ok().body(${table.entityPath}Service.getById(id));
    }

    /**
     * @description : 通过id删除${entity}
     * @author : ${author}
     * @since : Create in ${date}
     * 根据RFC2612 DELETE 定义：
     *     如果响应里包含描述成功的实体，响应应该是200（Ok）；如果DELETE动作没有通过，应该以202（已接受Accepted）响应；
     *     如果DELETE方法请求已经通过了，但响应不包含实体，那么应该以204（无内容）响应。
     * @return : DELETE返回204（no context）
     *
     */
    @Timed
    @DeleteMapping("/${resource}s/{id}")
    public ResponseEntity<String> delete${entity}ById(@PathVariable String id) {
        logger.info("根据id删除${entity}数据{}",id);
        ${table.entityPath}Service.removeById(id);
        return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert("${resource}",id)).build();
    }

    /**
     * @description : 更新${entity}
     * @author : ${author}
     * @since : Create in ${date}
     * 根据RFC2612 PUT 定义：
     *     如果已存在的资源被改变了，那么源服务器应该发送200（Ok）或者204（无内容）响应。
     *     如果资源不能根据请求URI创建或者改变，一个合适的错误响应应该给出以反应问题的性质。
     *     实体的接收者不能忽略任何它不理解的Content-*（如：Content-Range）头域，
     *     并且必须返回501（没有被实现）响应。
     * @return : 如果PUT操作更新成功返回200（ok），并且Body中返回已修改的Entity对象,乐观锁冲突返回400（bad request）
     */
    @Timed
    @PutMapping("/${resource}s")
    public ResponseEntity<${entity}> update${entity}ById(@RequestBody @Valid ${entity} ${table.entityPath})throws URISyntaxException{
        logger.info("更新${entity}数据{}",${table.entityPath});
        ${table.entityPath}Service.saveObject(${table.entityPath});
        return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("${resource}",${table.entityPath}.getId())).body(${table.entityPath});
    }

    /**
     * @description : 添加${entity}
     * @author : ${author}
     * @since : Create in ${date}
     * @return :如果POST操作更新成功返回201（Created），并且Body中返回已创建的Entity对象
     */
    @Timed
    @PostMapping("/${resource}s")
    public ResponseEntity<${entity}> create${entity}(@RequestBody @Valid ${entity} ${table.entityPath})throws URISyntaxException{
        logger.info("新增数据{}",${table.entityPath});
        ${table.entityPath}Service.save(${table.entityPath});
        return ResponseEntity.created(new URI("/api/${resource}s/"+ ${table.entityPath}.getId())).headers(HeaderUtil.createEntityCreationAlert("${resource}",${table.entityPath}.getId())).body(${table.entityPath});
    }
}
